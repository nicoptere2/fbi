shiny::runApp('LABANIM/IQA/UX/IQA_1')
shiny::runApp('~/LABANIM/IQA/UX/IQA_1')
shiny::runApp('LABANIM/IQA/UX/IQA_1')
shiny::runApp('LABANIM/IQA/UX/IQA_1')
shiny::runApp('LABANIM/IQA/UX/IQA_1_SSIM')
shiny::runApp('LABANIM/IQA/UX/IQA_1_SSIM')
shiny::runApp('LABANIM/IQA/UX/IQA_1_SSIM')
shiny::runApp('LABANIM/IQA/UX/IQA_1_SSIM')
shiny::runApp('LABANIM/IQA/UX/IQA_1_WEQA')
file.remove(csvFileName)
shiny::runApp('LABANIM/IQA/UX/IQA_1')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_1')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
info = paste(system(command = 'ifconfig eth0',intern = TRUE),sep = '',collapse = '');info
info = paste(system(command = 'ifconfig',intern = TRUE),sep = '',collapse = '');info
info = grep('HWaddr',paste(system(command = 'ifconfig',intern = TRUE),sep = '',collapse = ''));info
info = paste(system(command = 'ifconfig',intern = TRUE),sep = '',collapse = '');info
library(rjson)
fromJSON(readLines("http://api.hostip.info/get_json.php", warn=F))
x <- system("ipconfig", intern=TRUE)
x <- system("ifconfig", intern=TRUE)
x[grep("IPv4", x)]
x <- system("ifconfig", intern=TRUE);x
grep("IPv4", x)
grep("inet adr", x)
x[grep("inet adr", x)]
info = paste(system(command = 'ifconfig',intern = TRUE),sep = '',collapse = '');info
info[grep("inet adr", info)]
grep("inet adr", info)
info = system(command = 'ifconfig',intern = TRUE),sep = '',collapse = '';info
info = system(command = 'ifconfig',intern = TRUE);info
grep("inet adr", info)
info[grep("inet adr", info)]
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
shiny::runApp('LABANIM/IQA/UX/IQA_2')
trunc(runif(10,1,25))
l=list()
source('~/LABANIM/IQA/UX/IQA_2/refNameConstructor_2.R')
'aaa' == 'aaa'
'aaa' == 'aab'
'aaa' == 'aaA'
'aaA' == 'aaA'
seq(1,5,+1)
seq(1,-5,+1)
seq(1,-5,1)
1:1:5
1:1.2:5
1:2:5
seq(1,5)
tk_choose.dir()
library("tcltk", lib.loc="/usr/lib/R/library")
tk_choose.dir()
db_path=tk_choose.dir()
db_path
db_path+"/1/"
db_path + "/1/"
cat(db_path , "/1/", sep = "")
fig_path = cat(db_path , "/1/", sep = "")
intToUtf8('2')
as.character(2)
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
source("https://bioconductor.org/biocLite.R")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
source("https://bioconductor.org/biocLite.R")
library("tools", lib.loc="/usr/lib/R/library")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
biocLite("EBImage")
library("EBImage", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
f=file.choose()
f=file.choose()
f
img=readImage(f)
install.packages("pixmap")
img=read.pnm(f)
library("pixmap", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
img=read.pnm(f)
f
setwd("~/Enseignements/Info M1 S7/Mop/Projet/1516/Face retrieval/orl_faces/s1")
img=read.pnm('1.pgm')
dim(img)
img=read.pnm('1.pgm',type = 'pgm')
detach("package:pixmap", unload=TRUE)
remove.packages("pixmap", lib="~/R/x86_64-pc-linux-gnu-library/3.1")
install.packages("melody")
f
getwd()
img=readPGN('1;pgn')
detach("package:EBImage", unload=TRUE)
library("png", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
img=readPGN('1;pgn')
img=readPNG('1;png')
dir
getwd()
img=readPNG('1.png')
size(img)
dim(img)
img[1:4,1:5]
v=img[1,1:5]
vv=img[1,1:5]
v==vv
sum(v==vv)
ifelse(vv==v,TRUE,FALSE)
w=vv
w[3] = 5
v==w
v=matrix(1:16,4,4)
v
v[2:4,2:4]
as.vector(v)
as.vector(v)[2:16]
v
v[2,]=11:14
v
l=list()
l[[1]]=array(0,c(5,15))
l[[1]][(1-1)*3+1]=v[2:16]
v[2:16]
v
l[[1]][(1-1)*3+1,]=v[2:16]
l
l[[1]][(2-1)*3+1,]=v[2:16]*2
l
l[[1]][(1-1)*3+2,]=v[2:16]
l
hist(l)
hist(l[[1]])
histinfo = hist(l[[1]],plot = FALSE)
histinfo
hist(l)
as.array(l)
l
l[[2]]=array(0,c(5,15))
l[[2]]=array(2,c(5,15))
l[[3]]=array(3,c(5,15))
l
as.array(l)
histinfo = hist(l[[1]],plot = FALSE)
histinfo
histinfo = hist(l[[1]],h = 1)
library("MASS", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
histinfo = truehist(l[[1]],h = 1)
histinfo = truehist(l[[1]],h = 10)
v
dim(v)
a=matrix(0,5,9)
dim(a)
histinfo = truehist(l[[1]],h = 1)
l[[1]]
histinfo = truehist(l[[1]],h = 1,prob = FALSE)
sum(l[[1]==0])
sum(l[[1]]==0)
histinfo
histinfo = truehist(l[[1]],h = 1,prob = FALSE)
histinfo
histinfo = truehist(l[[1]],h = 1)
histinfo
l[[1]]
truehist(l[[1]],h = 1)
h=hist(l[[1]],h = 1)
h=hist(l[[1]])
hist(l[[1]])
hi=hist(l[[1]])
hi
hi=truehist(l[[1]])
hi
v
unique(v)
v
vv
w
a
unique(a)
sort(v)
v
sort(v)
order(v)
v[order(v)]
sort(v)
v
v=v*2
v
sort(v)
order(v)
